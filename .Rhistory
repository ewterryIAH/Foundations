knitr::opts_chunk$set(echo = TRUE)
set.seed(330)
library(kableExtra)
library(DBI)
# con2 removed for security
con2 <- dbConnect(odbc::odbc(), Driver = "{SQL Server}", Server = "analyticslab.database.windows.net", Port = "1433", Database = "Accounting", UID = "Student",
PWD = "Acct7397")
knitr::opts_chunk$set(echo = TRUE)
set.seed(330)
library(kableExtra)
library(DBI)
# con2 removed for security
con2 <- dbConnect(odbc::odbc(), Driver = "{SQL Server}", Server = "analyticslab.database.windows.net", Port = "1433", Database = "Accounting", UID = "Student",
PWD = "Acct7397")
library(tidyverse)
rmse <- function(error)
{
sqrt(mean(error^2))
}
Advertising <-  dbGetQuery(con2,"
SELECT
[TV]
,[Radio]
,[Newspaper]
,[Sales]
FROM [dbo].[Advertising]
")
View(Advertising)
summary(Advertising$Sales)
summary(Advertising$Newspaper)
dataCov = cov(select(Advertising, Sales, Newspaper))
dataCov
mod1 = lm(Sales ~ Newspaper, Advertising)
summary(mod1)
CovX1Y = sum(((Advertising$Newspaper - mean(Advertising$Newspaper))* (Advertising$Sales - mean(Advertising$Sales))))/(nrow(Advertising)-1)
# or
CovX1Y2 = cov(Advertising$Sales, Advertising$Newspaper)
varX = var(Advertising$Newspaper)
b1 = CovX1Y/varX
seX  = sqrt(sum((Advertising$Newspaper - mean(Advertising$Newspaper))^2))
# Now, divide the overall std error of the model by that variable error
rmse = sqrt(sum((predict(mod1, Advertising) - Advertising$Sales)^2)/(nrow(Advertising)-1))
seBeta = rmse/seX
seBeta
base = data.frame(x = seq(from=-.01, to = .15, length.out = 100)) %>%
mutate(y = dnorm(x, mean = b1, sd = seBeta))
pBeta = ggplot(base, (aes(x, y))) + geom_line() +
theme(panel.background = element_rect(fill = "white")) +
geom_vline(xintercept = b1 - (2*seBeta), color = "red")
pBeta
coef(mod1) / sqrt(diag(vcov(mod1)))
coef(mod1) / sqrt(diag(vcov(mod1)))
mod2 = lm(Sales ~ Newspaper + Radio + TV, Advertising)
summary(mod2)
cvAd = cov(select(Advertising, Sales, Newspaper, Radio, TV))
cvAd
corAd = cov2cor(cvAd)
# or just
corAd = cor(select(Advertising, Sales, Newspaper, Radio, TV))
corAd
sigma(lm(Sales ~ Newspaper + Radio + TV, Advertising))
sigma(lm(Sales ~ Radio + TV, Advertising))
Autos <-  dbGetQuery(con2,"
SELECT
[price]
,[make]
,[horsepower]
FROM [dbo].[Automobile Price Prediction]
")
library(DBI)
con2 <- dbConnect(odbc::odbc(), Driver = "{SQL Server}", Server = "analyticslab.database.windows.net",
Port = "1433", Database = "Accounting", UID = "Student",
PWD = "Acct7397")
Autos <-  dbGetQuery(con2,"
SELECT
[price]
,[make]
,[horsepower]
FROM [dbo].[Automobile Price Prediction]
")
# Convert data to numeric (comes from server as character)
Autos$price = as.numeric(Autos$price)
Autos$horsepower = as.numeric(Autos$horsepower)
p <- ggplot(Autos, aes(x=horsepower, y=price))+geom_point() +
geom_smooth(method = "lm", se = F) +
theme(panel.background = element_rect(fill = "white"))
p
View(Autos)
# NOTE: Correlation is a numerical calculation,
# so we need to covert categorical variables to numeric
# one way to do that is to use factors.
Autos$make = factor(Autos$make)
# Another thing we have to do is make sure all the data
# are numeric - we can use data.matrix to do that:
cor(data.matrix(Autos))
Autos <-  dbGetQuery(con2,"
SELECT
[price]
,[make]
,[horsepower]
FROM [dbo].[Automobile Price Prediction]
")
str(Autos)
Autos$price = as.numeric(Autos$price)
Autos$horsepower = as.numeric(Autos$horsepower)
p <- ggplot(Autos, aes(x=horsepower, y=price))+geom_point() +
geom_smooth(method = "lm", se = F) +
theme(panel.background = element_rect(fill = "white"))
p
Autos$make = factor(Autos$make)
str(Autos)
cor(data.matrix(Autos))
tst = data.matrix(Autos)
View(tst)
model2 <- lm(price ~ horsepower + make, Autos)
summary(model2)
modMatrix = model.matrix(price ~ horsepower + make, Autos)
print(modMatrix[1:10, 1:5])
View(modMatrix)
p <- ggplot(Autos, aes(x=horsepower, y=price)) + geom_point() +
geom_abline(intercept = (model2$coefficients["(Intercept)"] + model2$coefficients["makebmw"]) ,
slope = model2$coefficients["horsepower"], color = 'blue') +
geom_abline(intercept = (model2$coefficients["(Intercept)"] + model2$coefficients["makehonda"]) ,
slope = model2$coefficients["horsepower"], color = 'red') +  theme(panel.background = element_rect(fill = "white"))
p
premiums = read_csv("C:/Users/ellen/Documents/UH/Spring 2020/DA2/tmpGitHub/EllenwTerry/Foundations/Premiums-DA1.csv")
p = ggplot(premiums, aes(Size, Premium)) +
geom_point()+
geom_point(aes(Size, Premium, color = Churn)) +
theme(panel.background = element_rect(fill = "white"))
p
View(premiums)
View(premiums)
tstBMW = data.frame(make = 'bmw', horsepower = 150)
tstBMW
modPred = predict(model2, tstBMW)
modPred
eqPred = as.numeric((coef(model2)["(Intercept)"]  + model2$coefficients["makebmw"]) + (150*model2$coefficients["horsepower"]))[1]
eqPred
# so how much would we expect to pay for a bmw with 150 horsepower?
# create a new test set and use that to predict
tstBMW = data.frame(make = 'bmw', horsepower = 150)
modPred = predict(model2, tstBMW)
#OR
eqPred = as.numeric((coef(model2)["(Intercept)"]  + model2$coefficients["makebmw"]) + (150*model2$coefficients["horsepower"]))[1]
Out = data.frame(Source = c("Model = ", "Equation = "), Value = c(modPred, eqPred ))
knitr::kable(Out) %>%
kable_styling(full_width = F, bootstrap_options = "striped", font_size = 9)
View(premiums)
